panel.background = element_rect(fill = "white"),
legend.position = c(-2.5, 5),
axis.line = element_line(linewidth = 0.5, colour = "black"),
plot.margin = margin(10, 10, 10, 10))+
theme_csd()
limma_results %>%
ggplot(aes(x = AveExpr, y = logFC)) +
geom_point(aes(colour = significance:direction), size = 0.5) +
scale_color_manual(values = c("black","black", "red", "deepskyblue"), name = "",
labels = c("Downregulated insignificant", "Upregulated insignificant", "Upregulated significant",
"Downregulated significant")) +
theme(axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12, hjust = -1),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"),
axis.line = element_line(linewidth = 0.5, colour = "black"),
legend.position = c(0.175, 0.9),
plot.margin = margin(10, 10, 10, 10)) +
xlab("log2 mean abundance") +
ylab("log2 fold change") +
theme_csd()
## Upload fasta file containing the mouse proteome
mouse_fasta <- Biostrings::fasta.index(directory_hp, seqtype = "AA")
## Extract protein accession numbers
mouse_accessions <- regmatches(mouse_fasta$desc,
gregexpr("(?<=\\|).*?(?=\\|)", mouse_fasta$desc, perl = TRUE)) %>%
unlist()
## Extract gene names
gene_name <- str_extract(mouse_fasta$desc, "(?<=GN=)[^ ]*(?= |$)")
## Extract protein description
gene_desc <- gsub(".*MOUSE (.+) OS.*", "\\1", mouse_fasta$desc)
#check this bit works
## Create dataframe with accession number, gene name and protein description
mouse_data <- cbind(mouse_accessions, gene_name)
mouse_data <- cbind(mouse_data, gene_desc)
mouse_data <- as.data.frame(mouse_data)
## Set column names as protein accession
colnames(mouse_data)[1] <- "Protein"
## Merge mouse proteome dataframe with limma results
limma_results_with_genes <- join(limma_results, mouse_data)
rownames(limma_results_with_genes) <- rownames(limma_results)
## Check for proteins without a gene name
table(is.na(limma_results_with_genes$gene_name) == TRUE)
table(is.na(limma_results_with_genes$gene_name) == TRUE)
## Store indices of duplicated gene names
na_genes <- which(is.na(limma_results_with_genes$gene_name) == TRUE)
## Remove these rows from our data
limma_results_with_genes <- limma_results_with_genes[-na_genes, ]
message(paste0("Removed ", length(na_genes), " NAs for gene name"))
table(duplicated(limma_results_with_genes$gene_name) == TRUE)
## Store indices of duplicated gene names
duplicated_genes <- which(duplicated(limma_results_with_genes$gene_name) == TRUE)
## Remove these rows from our data
limma_results_with_genes <- limma_results_with_genes[-duplicated_genes, ]
message(paste0("Removed ", length(duplicated_genes), " duplicated gene name"))
str(li <- a_results_with_genes)
## How are the NA values distributed across the data
missingdataplot <- (nNA(hoefig_qf[[3]])$nNAcols %>%
as_tibble() %>%
mutate(condition = ifelse(name %in% cl, "CL", "NC")) %>%
ggplot(aes(x = name, y = pNA, fill = condition, group = condition)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Missing values (%)") +
geom_hline(yintercept = 17.2, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("purple", "orange"))
theme_csd() )
## How are the NA values distributed across the data
missingdataplot <- (nNA(hoefig_qf[[3]])$nNAcols %>%
as_tibble() %>%
mutate(condition = ifelse(name %in% cl, "CL", "NC")) %>%
ggplot(aes(x = name, y = pNA, fill = condition, group = condition)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Missing values (%)") +
geom_hline(yintercept = 17.2, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("purple", "orange"))+
theme_csd() )
missingdataplot
ggsave(filename = "../results/missingdataplot.png", plot = missingdataplot, dpi = 300)
norm_protein_ratio_df %>%
na.omit() %>%
filter(!glyco_rbp_annotation %in% c("glyco_rbp")) %>%
ggplot(aes(x = log2(ratio_nc_over_cl), color = glycoprotein, group = glycoprotein)) +
geom_density() +
geom_vline(xintercept = 0, colour = 'grey', linetype = 2) +
facet_wrap(~ replicate) +
theme_csd() +
xlab(label = "log2(CL/NC)") +
xlim(-0.3, 0.6)+
ggtitle(label = "Protein ratios CL/NC per replicate after glycoprotein normalisation")
distributionplotswf <- (norm_protein_ratio_df %>%
na.omit() %>%
filter(!glyco_rbp_annotation %in% c("glyco_rbp")) %>%
ggplot(aes(x = log2(ratio_nc_over_cl), color = glycoprotein, group = glycoprotein)) +
geom_density() +
geom_vline(xintercept = 0, colour = 'grey', linetype = 2) +
facet_wrap(~ replicate) +
theme_csd() +
xlab(label = "log2(CL/NC)") +
xlim(-0.3, 0.6)+
ggtitle(label = "Protein ratios CL/NC per replicate after glycoprotein normalisation"))
distributionplotswf <- (norm_protein_ratio_df %>%
na.omit() %>%
filter(!glyco_rbp_annotation %in% c("glyco_rbp")) %>%
ggplot(aes(x = log2(ratio_nc_over_cl), color = glycoprotein, group = glycoprotein)) +
geom_density() +
geom_vline(xintercept = 0, colour = 'grey', linetype = 2) +
facet_wrap(~ replicate) +
theme_csd() +
xlab(label = "log2(CL/NC)") +
xlim(-0.3, 0.6))
distributionplotswf
ggsave(filename = "../results/distributionplotswf.png", plot = distributionplotswf, dpi = 300)
ggplot(data = pca_df, (aes(x = PC1, y = PC2, colour = condition))) +
geom_point(size = 4) +
scale_color_brewer(palette = "Set2") + labs(colour = "condition") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 10)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
guides(colour = guide_legend(override.aes = list(size = 3))) +
ggtitle("Protein level PCA plot") +
xlab(label = "PC1 (51.1 %)") + ylab(label = "PC2 (21.4 %)") +
xlim(-75, 75) + ylim(-75, 75) +
coord_fixed(ratio = 1)+
theme_csd()
wfpca <- (ggplot(data = pca_df, (aes(x = PC1, y = PC2, colour = condition))) +
geom_point(size = 4) +
scale_color_brewer(palette = "Set2") + labs(colour = "condition") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 10)) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c("purple", "orange"))+
geom_vline(xintercept = 0, linetype = "dashed") +
guides(colour = guide_legend(override.aes = list(size = 3))) +
ggtitle("Protein level PCA plot") +
xlab(label = "PC1 (51.1 %)") + ylab(label = "PC2 (21.4 %)") +
xlim(-75, 75) + ylim(-75, 75) +
coord_fixed(ratio = 1)+
theme_csd())
wfpca
wfpca <- (ggplot(data = pca_df, (aes(x = PC1, y = PC2, colour = condition))) +
geom_point(size = 4) +
scale_color_brewer(palette = "Set2") + labs(colour = "condition") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 10)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
guides(colour = guide_legend(override.aes = list(size = 3))) +
ggtitle("Protein level PCA plot") +
xlab(label = "PC1 (51.1 %)") + ylab(label = "PC2 (21.4 %)") +
xlim(-75, 75) + ylim(-75, 75) +
coord_fixed(ratio = 1)+
scale_fill_manual(values = c("purple", "orange"))+
theme_csd())
wfpca
wfpca <- (ggplot(data = pca_df, (aes(x = PC1, y = PC2, colour = condition))) +
geom_point(size = 4) +
scale_color_brewer(palette = "Set2") + labs(colour = "condition") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 10)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
guides(colour = guide_legend(override.aes = list(size = 3))) +
xlab(label = "PC1 (51.1 %)") + ylab(label = "PC2 (21.4 %)") +
xlim(-75, 75) + ylim(-75, 75) +
coord_fixed(ratio = 1)+
scale_fill_manual(values = c("purple", "orange"))+
theme_csd())
wfpca
View(pca_df)
wfpca <- (ggplot(data = pca_df, (aes(x = PC1, y = PC2, colour = condition))) +
geom_point(size = 4) +
scale_color_brewer(palette = "Set2") + labs(colour = "condition") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 10)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
guides(colour = guide_legend(override.aes = list(size = 3))) +
xlab(label = "PC1 (91.6 %)") + ylab(label = "PC2 (5.4 %)") +
xlim(-75, 75) + ylim(-75, 75) +
coord_fixed(ratio = 1)+
scale_fill_manual(values = c("purple", "orange"))+
theme_csd())
wfpca <- (ggplot(data = pca_df, (aes(x = PC1, y = PC2, colour = condition))) +
geom_point(size = 4) +
scale_color_brewer(palette = "Set2") + labs(colour = "condition") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 10)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("purple","orange"))+
guides(colour = guide_legend(override.aes = list(size = 3))) +
xlab(label = "PC1 (91.6 %)") + ylab(label = "PC2 (5.4 %)") +
xlim(-75, 75) + ylim(-75, 75) +
coord_fixed(ratio = 1)+
theme_csd())
wfpca
ggsave(filename = "../results/missingdataplot.png", plot = missingdataplot, dpi = 300)
ggsave(filename = "../results/wfpca.png", plot = wfpca, dpi = 300)
## Plot histogram of p-values
limmaplot <- (limma_results %>%
ggplot(aes(x = P.Value)) +
geom_histogram(binwidth = 0.025) +
labs(x = "P-value", y = "Frequency") +
theme_csd(aspect_square = FALSE) )
ggsave(filename = "../results/limmaplot.png", plot = limmaplot, dpi = 300)
## Plot histogram of p-values
limmaplot <- (limma_results %>%
ggplot(aes(x = P.Value)) +
geom_histogram(binwidth = 0.025) +
labs(x = "p-value", y = "Frequency") +
theme_csd(aspect_square = FALSE) )
limmaplot
ggsave(filename = "../results/limmaplot.png", plot = limmaplot, dpi = 300)
## Generate a volcano plot
volcanowf <- (limma_results %>%
ggplot(aes(x = logFC, y = -log10(P.Value))) +
geom_point(aes(colour = significance:direction), size = 0.5) +
scale_color_manual(values = c("black","black", "red", "deepskyblue"), name = "",
labels = c("Downregulated insignificant", "Upregulated insignificant", "Upregulated significant",
"Downregulated significant")) +
theme(axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12, hjust = -1),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"),
legend.position = c(-2.5, 5),
axis.line = element_line(linewidth = 0.5, colour = "black"),
plot.margin = margin(10, 10, 10, 10))+
xlab("log(abundance)")+
ylab("log(FC)")
theme_csd())
## Generate a volcano plot
volcanowf <- (limma_results %>%
ggplot(aes(x = logFC, y = -log10(P.Value))) +
geom_point(aes(colour = significance:direction), size = 0.5) +
scale_color_manual(values = c("black","black", "red", "deepskyblue"), name = "",
labels = c("Downregulated insignificant", "Upregulated insignificant", "Upregulated significant",
"Downregulated significant")) +
theme(axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12, hjust = -1),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"),
legend.position = c(-2.5, 5),
axis.line = element_line(linewidth = 0.5, colour = "black"),
plot.margin = margin(10, 10, 10, 10))+
xlab("log(abundance)")+
ylab("log(FC)")+
theme_csd())
volcanowf
## Generate a volcano plot
volcanowf <- (limma_results %>%
ggplot(aes(x = logFC, y = -log10(P.Value))) +
geom_point(aes(colour = significance:direction), size = 0.5) +
scale_color_manual(values = c("black","black", "red", "deepskyblue"), name = "",
labels = c("Downregulated insignificant", "Upregulated insignificant", "Upregulated significant",
"Downregulated significant")) +
theme(axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12, hjust = -1),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"),
legend.position = c(-2.5, 5),
axis.line = element_line(linewidth = 0.5, colour = "black"),
plot.margin = margin(10, 10, 10, 10))+
xlab("log(abundance)")+
ylab("log(FC)")+
theme_csd())
volcanowf
ggsave(filename = "../results/volcanowf.png", plot = volcanowf, dpi = 300)
## Generate a volcano plot
volcanowf <- (limma_results %>%
ggplot(aes(x = logFC, y = -log10(P.Value))) +
geom_point(aes(colour = significance:direction), size = 0.5) +
scale_color_manual(values = c("black","black", "red", "deepskyblue"), name = "",
labels = c("Downregulated insignificant", "Upregulated insignificant", "Upregulated significant",
"Downregulated significant")) +
theme(axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12, hjust = -1),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"),
legend.position = c(-2.5, 5),
axis.line = element_line(linewidth = 0.5, colour = "black"),
plot.margin = margin(10, 10, 10, 10))+
xlab("-log(p-value)")+
ylab("log(FC)")+
theme_csd())
volcanowf
## Generate a volcano plot
volcanowf <- (limma_results %>%
ggplot(aes(x = logFC, y = -log10(P.Value))) +
geom_point(aes(colour = significance:direction), size = 0.5) +
scale_color_manual(values = c("black","black", "red", "deepskyblue"), name = "",
labels = c("Downregulated insignificant", "Upregulated insignificant", "Upregulated significant",
"Downregulated significant")) +
theme(axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12, hjust = -1),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"),
legend.position = c(-2.5, 5),
axis.line = element_line(linewidth = 0.5, colour = "black"),
plot.margin = margin(10, 10, 10, 10))+
ylab("-log(p-value)")+
xlab("log(FC)")+
theme_csd())
volcanowf
ggsave(filename = "../results/volcanowf.png", plot = volcanowf, dpi = 300)
mawf <- (limma_results %>%
ggplot(aes(x = AveExpr, y = logFC)) +
geom_point(aes(colour = significance:direction), size = 0.5) +
scale_color_manual(values = c("black","black", "red", "deepskyblue"), name = "",
labels = c("Downregulated insignificant", "Upregulated insignificant", "Upregulated significant",
"Downregulated significant")) +
theme(axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12, hjust = -1),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"),
axis.line = element_line(linewidth = 0.5, colour = "black"),
legend.position = c(0.175, 0.9),
plot.margin = margin(10, 10, 10, 10)) +
xlab("log(abundance)") +
ylab("log(FC)") +
theme_csd())
mawf
ggsave(filename = "../results/mawf.png", plot = mawf, dpi = 300)
ggplot(mf_go2, aes(x = reorder(term, +log2_over_represented), y = log2_over_represented)) +
geom_bar(stat = "identity", fill = "steelblue")+
coord_flip()+
labs(x = "Gene Ontology Term", y = "log(p-value)")+
theme_csd()
# MF GO terms
library(dplyr)
mf_go <- result
# hl is data from mouse. Let's see if goseq can deal with mouse data
#supportedOrganisms()
# we'll use mm9 for now
#supportedOrganisms()[supportedOrganisms()$Genome=="hg19",]
# goseq can recognise Entrez gene IDs, Ensembl gene IDs, and Gene Symbols
# we can map uniprot IDs to Ensembl gene IDs with uniprotREST
acc_to_map <- rownames(hoefig_qf[[3]])
acc_mapped <- uniprot_map(acc_to_map, to = "Ensembl")
# add Ensembl IDs to QFeatures object
# (don't know if this is the proper way to do this...)
rowData(hoefig_qf[[3]]) <- rowData(hoefig_qf[[3]]) %>%
data.frame() %>%
tibble::rownames_to_column("rowname") %>%
left_join(acc_mapped, by = c("Master.Protein.Accessions" = "From")) %>%
rename("ensembl" = "To") %>%
distinct(rowname, .keep_all = TRUE) %>%  # remove unintended duplicates indiscriminantly for now
tibble::column_to_rownames("rowname")
# Just for this example, filter out rows without Ensembl ID
# filter out duplicates
hoefig_qf <- filterFeatures(hoefig_qf, ~ !is.na(ensembl) & !duplicated(ensembl), keep=TRUE)
# this line of code is clearning all the other data in the other layers of the QF object
anyDuplicated(rowData(hoefig_qf[[3]])$ensembl)
rowData(hoefig_qf[[3]])$up_significant <-
ifelse(rowData(hoefig_qf[[3]])$Master.Protein.Accessions %in% upregulated_proteins, 1, 0)
rowData(hoefig_qf[[3]])$up_significant <-
ifelse(rowData(hoefig_qf[[3]])$Master.Protein.Accessions %in% upregulated_proteins, 1, 0)
head(rowData(hoefig_qf[[3]]))
# prepare vector of DE genes for goseq
genes <- rowData(hoefig_qf[[3]])$up_significant
names(genes) <- rowData(hoefig_qf[[3]])$ensembl
head(genes)
table(genes)
## Plot a scatterplot of the data
ggplot(data = filtered_proteins_df2, aes(x = mean_nc, y = mean_cl, color = type)) +
geom_point(size = 0.9) +
geom_abline(intercept = 0, slope = 1) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.background = element_rect(fill="white"),
panel.background = element_rect(fill="white"),
axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12),
axis.line = element_line(linewidth = 0.5, colour = "black"),
plot.margin = margin(10, 10, 10, 10)) +
xlab("Average Non-crosslinked Intensity") + ylab("Average Crosslinked Intensity") +
coord_fixed(ratio = 1) +
xlim(15,30)+
ylim(15,30)+
scale_color_manual(values=c("#56B4E9","35ccd0ff", "#f99b94ff"))+
theme_csd()
## Plot a scatterplot of the data
ggplot(data = filtered_proteins_df2, aes(x = mean_nc, y = mean_cl, color = type)) +
geom_point(size = 0.9) +
geom_abline(intercept = 0, slope = 1) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.background = element_rect(fill="white"),
panel.background = element_rect(fill="white"),
axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12),
axis.line = element_line(linewidth = 0.5, colour = "black"),
plot.margin = margin(10, 10, 10, 10)) +
xlab("Average Non-crosslinked Intensity") + ylab("Average Crosslinked Intensity") +
coord_fixed(ratio = 1) +
xlim(18,30)+
ylim(18,30)+
scale_color_manual(values=c("#56B4E9","35ccd0ff", "#f99b94ff"))+
theme_csd()
## Plot a scatterplot of the data
ggplot(data = filtered_proteins_df2, aes(x = mean_nc, y = mean_cl, color = type)) +
geom_point(size = 0.9) +
geom_abline(intercept = 0, slope = 1) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.background = element_rect(fill="white"),
panel.background = element_rect(fill="white"),
axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12),
axis.line = element_line(linewidth = 0.5, colour = "black"),
plot.margin = margin(10, 10, 10, 10)) +
xlab("Average Non-crosslinked Intensity") + ylab("Average Crosslinked Intensity") +
coord_fixed(ratio = 1) +
xlim(18,28)+
ylim(18,28)+
scale_color_manual(values=c("#56B4E9","35ccd0ff", "#f99b94ff"))+
theme_csd()
## Plot a scatterplot of the data
scatterplot <- (ggplot(data = filtered_proteins_df2, aes(x = mean_nc, y = mean_cl, color = type)) +
geom_point(size = 0.9) +
geom_abline(intercept = 0, slope = 1) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.background = element_rect(fill="white"),
panel.background = element_rect(fill="white"),
axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12),
axis.line = element_line(linewidth = 0.5, colour = "black"),
plot.margin = margin(10, 10, 10, 10)) +
xlab("Average Non-crosslinked Intensity") + ylab("Average Crosslinked Intensity") +
coord_fixed(ratio = 1) +
xlim(18,28)+
ylim(18,28)+
scale_color_manual(values=c("#56B4E9","35ccd0ff", "#f99b94ff"))+
theme_csd())
ggsave(filename = "../results/scatterplot.png", plot = scatterplot, dpi = 300)
scatterplot
## Plot a scatterplot of the data
scatterplot <- (ggplot(data = filtered_proteins_df2, aes(x = mean_nc, y = mean_cl, color = type)) +
geom_point(size = 0.9) +
geom_abline(intercept = 0, slope = 1) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.background = element_rect(fill="white"),
panel.background = element_rect(fill="white"),
axis.title.x = element_text(size = 15, face = "bold", vjust = -2),
axis.title.y = element_text(size = 15, face = "bold", vjust = 3),
axis.text.x = element_text(size = 12, vjust = -1),
axis.text.y = element_text(size = 12),
axis.line = element_line(linewidth = 0.5, colour = "black"),
plot.margin = margin(10, 10, 10, 10)) +
xlab("Mean Non-crosslinked Intensity") + ylab("Mean Crosslinked Intensity") +
coord_fixed(ratio = 1) +
xlim(18,28)+
ylim(18,28)+
scale_color_manual(values=c("#56B4E9","35ccd0ff", "#f99b94ff"))+
theme_csd())
scatterplot
ggsave(filename = "../results/scatterplot.png", plot = scatterplot, dpi = 300)
citation("limma")
citation("robustSummary")
citation("AnnotationDbi")
citation("uniprotREST")
citation("qfeatures")
citation("QFeatures")
